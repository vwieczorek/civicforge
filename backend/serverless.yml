service: civicforge-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  
  httpApi:
    # Cognito JWT Authorizer configuration
    authorizers:
      cognitoJwtAuthorizer:
        type: jwt
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${ssm:/civicforge/${self:provider.stage}/cognito-user-pool-id}
        audience:
          - ${ssm:/civicforge/${self:provider.stage}/cognito-app-client-id}
    # Apply authorizer by default to all endpoints
    authorizer: cognitoJwtAuthorizer
    # CORS configuration for frontend integration
    cors:
      allowedOrigins:
        - ${ssm:/civicforge/${self:provider.stage}/frontend-url, 'http://localhost:5173'}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
      allowCredentials: true
    throttle:
      rateLimit: 100  # requests per second
      burstLimit: 200  # burst capacity
  
  # Enable AWS X-Ray tracing for better observability
  tracing:
    lambda: true
    apiGateway: true
  
  environment:
    COGNITO_REGION: ${self:provider.region}
    COGNITO_USER_POOL_ID: ${ssm:/civicforge/${self:provider.stage}/cognito-user-pool-id}
    COGNITO_APP_CLIENT_ID: ${ssm:/civicforge/${self:provider.stage}/cognito-app-client-id}
    USERS_TABLE: ${self:custom.usersTable}
    QUESTS_TABLE: ${self:custom.questsTable}
    FAILED_REWARDS_TABLE: ${self:custom.failedRewardsTable}
    FRONTEND_URL: ${ssm:/civicforge/${self:provider.stage}/frontend-url, 'http://localhost:5173'}
    # Feature flags
    FF_REWARD_DISTRIBUTION: ${env:FF_REWARD_DISTRIBUTION, 'false'}
    FF_SIGNATURE_ATTESTATION: ${env:FF_SIGNATURE_ATTESTATION, 'true'}
    FF_DISPUTE_RESOLUTION: ${env:FF_DISPUTE_RESOLUTION, 'false'}
  
  iam:
    role:
      statements:
        # Minimal default permissions for logging
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*"
        # X-Ray tracing permissions
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"

custom:
  usersTable: civicforge-${self:provider.stage}-users
  questsTable: civicforge-${self:provider.stage}-quests
  failedRewardsTable: civicforge-${self:provider.stage}-failed-rewards
  pythonRequirements:
    dockerizePip: true
    slim: true
  serverless-offline:
    httpPort: 3001

functions:
  # Main API handler - handles most operations except critical ones
  api:
    handler: handlers.api.handler
    events:
      # Health check (public endpoint - no authentication required)
      - httpApi:
          path: /health
          method: GET
          authorizer: none
      - httpApi:
          path: /api/v1/quests
          method: GET
      - httpApi:
          path: /api/v1/quests/{quest_id}
          method: GET
      - httpApi:
          path: /api/v1/quests/{quest_id}/claim
          method: POST
      - httpApi:
          path: /api/v1/quests/{quest_id}/submit
          method: POST
      - httpApi:
          path: /api/v1/quests/{quest_id}/dispute
          method: POST
      - httpApi:
          path: /api/v1/users/{user_id}
          method: GET
      - httpApi:
          path: /api/v1/users/wallet
          method: PUT
      - httpApi:
          path: /api/v1/feature-flags
          method: GET
    iamRoleStatements:
      # Read permissions
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}/index/*"
      # Update permissions for quest operations - restricted to specific attributes
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "status"
              - "performerId"
              - "claimedAt"
              - "submissionText"
              - "submittedAt"
              - "disputeReason"
              - "updatedAt"
      # Restricted UpdateItem on UsersTable - only allow wallet address updates
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "walletAddress"
              - "updatedAt"
      # Explicitly DENY dangerous operations
      - Effect: Deny
        Action:
          - dynamodb:DeleteItem
        Resource: "*"
  
  # Critical operation: Create Quest (involves financial transaction)
  createQuest:
    handler: handlers.create_quest.handler
    events:
      - httpApi:
          path: /api/v1/quests
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
      # Restricted UpdateItem on UsersTable - only allow quest creation point deduction
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "questCreationPoints"
              - "updatedAt"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
  
  # Critical operation: Attest Quest (involves rewards)
  attestQuest:
    handler: handlers.attest_quest.handler
    events:
      - httpApi:
          path: /api/v1/quests/{quest_id}/attest
          method: POST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
      # Separate GetItem for UsersTable (no attribute restriction needed for reads)
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
      # Restricted UpdateItem on UsersTable - only allow specific attributes
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "xp"
              - "reputation"
              - "questCreationPoints"
              - "processedRewardIds"
              - "updatedAt"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.failedRewardsTable}"
  
  # Critical operation: Delete Quest (dangerous operation)
  deleteQuest:
    handler: handlers.delete_quest.handler
    events:
      - httpApi:
          path: /api/v1/quests/{quest_id}
          method: DELETE
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.questsTable}"
      # Restricted UpdateItem on UsersTable - only allow quest point refund
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "questCreationPoints"
              - "updatedAt"
  
  createUserTrigger:
    handler: src.triggers.create_user.handler
    memorySize: 128
    timeout: 10
    environment:
      USERS_TABLE_NAME: ${self:custom.usersTable}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
    onError: !GetAtt UserCreationDLQ.Arn
  
  # DLQ Re-processor for failed rewards
  reprocessFailedRewards:
    handler: src.triggers.reprocess_failed_rewards.handler
    memorySize: 256
    timeout: 60
    events:
      # Run every 15 minutes
      - schedule: rate(15 minutes)
    environment:
      USERS_TABLE: ${self:custom.usersTable}
      FAILED_REWARDS_TABLE: ${self:custom.failedRewardsTable}
      MAX_RETRY_ATTEMPTS: 5
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.failedRewardsTable}"
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.failedRewardsTable}/index/status-createdAt-index"
      # Read access to Users table
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
      # Restricted UpdateItem on UsersTable - only allow specific attributes
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.usersTable}"
        Condition:
          ForAllValues:StringEquals:
            "dynamodb:Attributes":
              - "xp"
              - "reputation"
              - "questCreationPoints"
              - "processedRewardIds"
              - "updatedAt"

plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-iam-roles-per-function

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    QuestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.questsTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: questId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: creatorId
            AttributeType: S
          - AttributeName: performerId
            AttributeType: S
        KeySchema:
          - AttributeName: questId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: CreatorIndex
            KeySchema:
              - AttributeName: creatorId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: PerformerIndex
            KeySchema:
              - AttributeName: performerId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    FailedRewardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.failedRewardsTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: failureId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: failureId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-createdAt-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
    # Dead Letter Queue for failed user creation attempts
    UserCreationDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-user-creation-dlq
        MessageRetentionPeriod: 1209600  # 14 days
        VisibilityTimeout: 60
    
    # CloudWatch Alarm for DLQ monitoring
    UserCreationDLQAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-user-creation-failures
        AlarmDescription: "Alert when user creation Lambda failures are queued in DLQ"
        MetricName: ApproximateNumberOfMessagesVisible
        Namespace: AWS/SQS
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: QueueName
            Value: !GetAtt UserCreationDLQ.QueueName
        TreatMissingData: notBreaching
    
    # Lambda permission for Cognito to invoke the trigger
    CreateUserTriggerLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt CreateUserTriggerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${ssm:/civicforge/${self:provider.stage}/cognito-user-pool-id}"
    
    # API Error Monitoring - Critical for production readiness
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-api
        RetentionInDays: 30
    
    ApiErrorMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Ref ApiLogGroup
        FilterPattern: '{ $.level = "ERROR" }'
        MetricTransformations:
          - MetricName: ApiErrors
            MetricNamespace: CivicForge/${self:provider.stage}
            MetricValue: 1
            DefaultValue: 0
    
    ApiErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-api-errors
        AlarmDescription: "Alert when API error rate exceeds threshold"
        MetricName: ApiErrors
        Namespace: CivicForge/${self:provider.stage}
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # Alarm for stuck messages in User Creation DLQ
    UserCreationDLQStaleMessagesAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:provider.stage}-UserCreationDLQ-StaleMsgs
        AlarmDescription: "Alert when messages are stuck in User Creation DLQ"
        MetricName: ApproximateAgeOfOldestMessage
        Namespace: AWS/SQS
        Dimensions:
          - Name: QueueName
            Value: !GetAtt UserCreationDLQ.QueueName
        Statistic: Maximum
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 3600  # 1 hour
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # Performance Monitoring Alarms for Lambda Functions
    
    # API Function Performance Alarms
    ApiDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-api-duration
        AlarmDescription: "Alert when API Lambda P95 duration exceeds threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-api
        Statistic: Average
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 3000  # 3 seconds
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    ApiThrottlesAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-api-throttles
        AlarmDescription: "Alert when API Lambda is being throttled"
        MetricName: Throttles
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-api
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    ApiConcurrentExecutionsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-api-concurrent-executions
        AlarmDescription: "Alert when API Lambda concurrent executions are high"
        MetricName: ConcurrentExecutions
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-api
        Statistic: Maximum
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 900  # 90% of default 1000 limit
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    ApiErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-api-function-errors
        AlarmDescription: "Alert when API Lambda has errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-api
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 10
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # CreateQuest Function Performance Alarms
    CreateQuestDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-createQuest-duration
        AlarmDescription: "Alert when CreateQuest Lambda P95 duration exceeds threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-createQuest
        Statistic: Average
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 2000  # 2 seconds
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    CreateQuestErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-createQuest-errors
        AlarmDescription: "Alert when CreateQuest Lambda has errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-createQuest
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # AttestQuest Function Performance Alarms
    AttestQuestDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-attestQuest-duration
        AlarmDescription: "Alert when AttestQuest Lambda P95 duration exceeds threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-attestQuest
        Statistic: Average
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 2000  # 2 seconds
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    AttestQuestErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-attestQuest-errors
        AlarmDescription: "Alert when AttestQuest Lambda has errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-attestQuest
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # DeleteQuest Function Performance Alarms
    DeleteQuestDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-deleteQuest-duration
        AlarmDescription: "Alert when DeleteQuest Lambda P95 duration exceeds threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-deleteQuest
        Statistic: Average
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 2000  # 2 seconds
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    DeleteQuestErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-deleteQuest-errors
        AlarmDescription: "Alert when DeleteQuest Lambda has errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-deleteQuest
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    # CreateUserTrigger Function Performance Alarms
    CreateUserTriggerDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-createUserTrigger-duration
        AlarmDescription: "Alert when CreateUserTrigger Lambda duration exceeds threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-createUserTrigger
        Statistic: Average
        Period: 300  # 5 minutes
        EvaluationPeriods: 2
        Threshold: 1000  # 1 second
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching
    
    CreateUserTriggerErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-createUserTrigger-errors
        AlarmDescription: "Alert when CreateUserTrigger Lambda has errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-createUserTrigger
        Statistic: Sum
        Period: 300  # 5 minutes
        EvaluationPeriods: 1
        Threshold: 3
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching