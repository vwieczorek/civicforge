#!/usr/bin/env python3
"""Test board invites with a pre-configured admin user."""

import os
import sys
import json
import urllib.request
import urllib.error
import urllib.parse
from datetime import datetime

API_URL = os.environ.get('API_URL', 'http://localhost:8000')
BOARD_ID = 'board_001'

def make_request(method, path, data=None, token=None):
    """Make HTTP request to API."""
    url = f"{API_URL}{path}"
    headers = {'Content-Type': 'application/json'}
    if token:
        headers['Authorization'] = f'Bearer {token}'
    
    req = urllib.request.Request(url, method=method, headers=headers)
    if data:
        req.data = json.dumps(data).encode('utf-8')
    
    try:
        with urllib.request.urlopen(req) as response:
            return response.status, json.loads(response.read().decode('utf-8'))
    except urllib.error.HTTPError as e:
        error_data = e.read()
        try:
            return e.code, json.loads(error_data.decode('utf-8'))
        except:
            return e.code, {'detail': 'Unknown error'}

def test_invite_system():
    """Test the invite system comprehensively using admin user."""
    print("🔧 Testing Board Invite System (Full Test)")
    print(f"API URL: {API_URL}")
    
    results = []
    
    # 1. Login as admin (who is already a board owner with XP)
    print("\n1️⃣ Logging in as admin (board owner)...")
    status, admin_data = make_request('POST', '/api/auth/login', {
        'username': 'admin',
        'password': 'admin123'
    })
    
    if status != 200:
        print(f"❌ Failed to login as admin: {admin_data}")
        return False
    
    admin_token = admin_data['token']
    print(f"✅ Logged in as admin")
    
    # 2. Create test users
    print("\n2️⃣ Creating test users...")
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    
    # Create friend user
    status, friend_data = make_request('POST', '/api/auth/register', {
        'username': f'test_friend_{timestamp}',
        'email': f'test_friend_{timestamp}@test.com',
        'password': 'testpass123',
        'real_name': 'Test Friend',
        'role': 'Friend'
    })
    if status != 200:
        print(f"❌ Failed to create friend: {friend_data}")
        return False
    friend_token = friend_data['token']
    print(f"✅ Created friend: {friend_data['username']}")
    
    # Create participant user
    status, participant_data = make_request('POST', '/api/auth/register', {
        'username': f'test_participant_{timestamp}',
        'email': f'test_participant_{timestamp}@test.com',
        'password': 'testpass123',
        'real_name': 'Test Participant',
        'role': 'Participant'
    })
    if status != 200:
        print(f"❌ Failed to create participant: {participant_data}")
        return False
    participant_token = participant_data['token']
    print(f"✅ Created participant: {participant_data['username']}")
    
    # 3. Test admin creating invites
    print("\n3️⃣ Testing admin creating invites...")
    
    # Create friend invite
    status, friend_invite = make_request('POST', f'/api/boards/{BOARD_ID}/invites', {
        'role': 'friend',
        'max_uses': 1,
        'expires_in_hours': 24
    }, token=admin_token)
    
    if status == 200:
        results.append("✅ Admin can create friend invites")
        # Extract token from invite_url
        invite_url = friend_invite['invite_url']
        friend_invite_token = invite_url.split('token=')[1]
        print(f"   Created friend invite: {friend_invite_token[:8]}...")
    else:
        results.append(f"❌ Failed to create friend invite: {status} - {friend_invite}")
        return results
    
    # Create reviewer invite
    status, reviewer_invite = make_request('POST', f'/api/boards/{BOARD_ID}/invites', {
        'role': 'reviewer',
        'max_uses': 2,
        'expires_in_hours': 48
    }, token=admin_token)
    
    if status == 200:
        results.append("✅ Admin can create reviewer invites")
        # Extract token from invite_url
        invite_url = reviewer_invite['invite_url']
        reviewer_invite_token = invite_url.split('token=')[1]
        print(f"   Created reviewer invite: {reviewer_invite_token[:8]}...")
    else:
        results.append(f"❌ Failed to create reviewer invite: {status} - {reviewer_invite}")
    
    # 4. Test unauthorized invite creation
    print("\n4️⃣ Testing unauthorized invite creation...")
    status, data = make_request('POST', f'/api/boards/{BOARD_ID}/invites', {
        'role': 'friend',
        'max_uses': 1
    }, token=friend_token)
    
    if status == 403:
        results.append("✅ Non-members cannot create invites")
    else:
        results.append(f"❌ Expected 403, got {status}: {data}")
    
    # 5. Test joining with valid token
    print("\n5️⃣ Testing joining board with valid token...")
    status, data = make_request('POST', f'/api/boards/{BOARD_ID}/join', {
        'invite_token': friend_invite_token
    }, token=friend_token)
    
    if status == 200:
        results.append("✅ Friend can join with valid invite")
    else:
        results.append(f"❌ Failed to join with valid token: {status} - {data}")
    
    # 6. Test friend permissions after joining
    print("\n6️⃣ Testing friend permissions...")
    
    # Try to create invite as friend
    status, data = make_request('POST', f'/api/boards/{BOARD_ID}/invites', {
        'role': 'participant',
        'max_uses': 1
    }, token=friend_token)
    
    if status == 403:
        results.append("✅ Friends cannot create invites")
    else:
        results.append(f"❌ Friend should not be able to create invites: {status}")
    
    # Try to view board members as friend
    status, members = make_request('GET', f'/api/boards/{BOARD_ID}/members', token=friend_token)
    
    if status == 200:
        results.append(f"✅ Friends can view board members ({len(members)} total)")
    else:
        results.append(f"❌ Friend cannot view members: {status}")
    
    # 7. Test participant joining with reviewer invite
    print("\n7️⃣ Testing participant joining with reviewer invite...")
    status, data = make_request('POST', f'/api/boards/{BOARD_ID}/join', {
        'invite_token': reviewer_invite_token
    }, token=participant_token)
    
    if status == 200:
        results.append("✅ Participant can join as reviewer")
    else:
        results.append(f"❌ Failed to join as reviewer: {status} - {data}")
    
    # 8. Test quest creation by admin
    print("\n8️⃣ Testing quest creation by admin...")
    status, quest_data = make_request('POST', '/api/quests', {
        'title': f'Test Quest {timestamp}',
        'description': 'Testing quest creation with sufficient XP',
        'experience_points': 10,
        'status': 'available'
    }, token=admin_token)
    
    if status == 200:
        results.append("✅ Admin can create quests")
        quest_id = quest_data['id']
    else:
        results.append(f"❌ Failed to create quest: {status} - {quest_data}")
    
    # 9. Test member removal
    print("\n9️⃣ Testing member removal...")
    
    # Get friend's user ID from members list
    status, members = make_request('GET', f'/api/boards/{BOARD_ID}/members', token=admin_token)
    friend_id = None
    if status == 200:
        for member in members:
            if member['username'] == friend_data['username']:
                friend_id = member['user_id']
                break
    
    if friend_id:
        status, data = make_request('DELETE', f'/api/boards/{BOARD_ID}/members/{friend_id}', token=admin_token)
        
        if status == 200:
            results.append("✅ Admin can remove members")
        else:
            results.append(f"❌ Failed to remove member: {status} - {data}")
    
    # 10. Test token reuse after removal
    print("\n🔟 Testing removed user cannot rejoin with same token...")
    status, data = make_request('POST', f'/api/boards/{BOARD_ID}/join', {
        'invite_token': friend_invite_token
    }, token=friend_token)
    
    if status in [400, 404]:
        results.append("✅ Used invites cannot be reused")
    else:
        results.append(f"❌ Token should be exhausted: {status}")
    
    # Print summary
    print("\n📊 Full Test Results Summary:")
    for result in results:
        print(f"   {result}")
    
    passed = sum(1 for r in results if r.startswith("✅"))
    total = len(results)
    print(f"\n{'✅' if passed == total else '❌'} {passed}/{total} tests passed")
    
    return passed == total

if __name__ == '__main__':
    success = test_invite_system()
    sys.exit(0 if success else 1)